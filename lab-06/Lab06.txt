Streams and comment line arguments!!!!!!!

1. Write an echo program. Program should write in column all comment line arguments. E.g. if you call:
		echo To be or not to be that is the question
  the program should write:
	To
	be
	or
	not
	to
	be
	that
	is
	the
	question

2.	Writing to a text file N number of random doubles between [d, g]. Allow a user to force a maximum number in line.
	Calling a program should be e.g.
		random_numbers <number of numbers> <min> <max> <no in line> [<output file name>]
	If the output file name is unspecified, assume std::cout.

3.	Read data from file generated by program from point 2 and determine the mean and the standard deviation of numbers. 
	Make sure the program behaves correctly for empty lines at the end of the file (while (file >> variable){ /* */ }).
	It should work properly for files with a large number of numbers, eg. included LargeInputNumbers.txt, which includes 
	some innocent defects in formatting.
	Detect erroneous data (no real numbers). The program should be called as follows:
		mean_std -i <input file name> [-o <output file name>]
	If the output file name is unspecified, assume std::cout. If the form of parameters are wrong, print a 
	help
		Proper calling of program:
		mean_std -i <input file name> [-o <output file name>] 
	and exit the program.

4. 	Write a program that reads an input file and calculates the frequency of letters 'a' - ' z ' in the file.
	Assume that lowercase and uppercase letters are the same. Ignore chars that are not letters. 
	The program should be called as follows:
		frequency -i <input file name> [-o <output file name>]
	If the output file name is unspecified, assume std::cout. If the form of parameters are wrong, print a
	help
		Proper calling of program:
		frequency -i <input file name> [-o <output file name>]
	and exit the program.
	The program should return a result in the following form, eg.:
	a => 457 => 12.3%
	where 'a' is a letter, 457 is the number of occurrences of the letter in the file, 
	and 12.3% is the percentage of the letter in the file.
	You can display the letters from the most common to the least common.


Mean value and standard deviation in details: https://en.wikipedia.org/wiki/Standard_deviation

Documentation of unknown libraries:
https://en.cppreference.com/w/
https://www.cplusplus.com/info/

Useful libraries 
<fstream>
Classes:
std::ifstream
	methodes get
	operator >>
	
std::ofstream
	operator <<
	
<strings>
	functions:
	istream& getline (istream&  is, string& str, char delim);
	istream& getline (istream&  is, string& str);
	
<sstream>
Classes
std::istringstream
	operator <<
	explicit istringstream (const string& str,
                        ios_base::openmode which = ios_base::in);
	int str() const
	void str(const string& s);
	
std::ostringstream
	operator<<
	explicit ostringstream (const string& str,
                        ios_base::openmode which = ios_base::out);
	string str() const;
	void str (const string& s);

<cctype>
Character classification functions
They check whether the character passed as parameter belongs to a certain category:
bool std::isalnum(char c) - Check if character is alphanumeric (function )
bool std::isalpha(char c) - Check if character is alphabetic (function )
bool std::isblank(char c) - Check if character is blank (function )
bool std::iscntrl(char c) - Check if character is a control character (function )
bool std::isdigit(char c) - Check if character is decimal digit (function )
bool std::isgraph(char c) - Check if character has graphical representation (function )
bool std::islower(char c) - Check if character is lowercase letter (function )
bool std::isprint(char c) - Check if character is printable (function )
bool std::ispunct(char c) - Check if character is a punctuation character (function )
bool std::isspace(char c) - Check if character is a white-space (function )
bool std::isupper(char c) - Check if character is uppercase letter (function )
bool std::isxdigit(char c) - Check if character is hexadecimal digit (function )

Character conversion functions
Two functions that convert between letter cases:
char std::tolower(char c) - Convert uppercase letter to lowercase (function )
char std::toupper(char c) - Convert lowercase letter to uppercase (function )
